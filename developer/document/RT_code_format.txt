RT code formatting:

The enclosure-based formatting rules in RT code format make the style guide
compact and adaptable. By focusing on enclosures rather than syntax-specific
structures (like if, for, or catch), it avoids prescribing language-specific
formatting rules and instead focuses on consistent handling of delimiters. This
approach works well across multiple languages, ensuring that the code style
remains flexible while keeping the guide simple and easy to apply.

1. Two space indentation.

2. Variable Naming:

   - Use **PascalCase** for namespaces and types.

   - Use **snake_case** for function and variable names. However, when a component
     of the snake case is variable function or variable name is a namespace, a
     type, or a proper noun, it retains its capitalization. e.gs:

     ```
     mouse_count
     test_LabalList_0 // function that tests LabelList, which is a class (type)
     Thomas_Walker_Lynch
     ```

     Traditionally `_list` has been used as a variable suffix even when the
     language does not have a List type.  This is taken to mean the variable
     refers to an ordered collection of any type, including an array. It is
     abstraction of type, analogous to the `mouse_count` example above.


3. Binary Operators:

   - One space around **binary operators** (e.g., `a + b`).

   - One space around **assignment** `=` (e.g., `a = b`).

   - **No space** around **sampling** assignment `=` (typically seen in `if`, `while`, etc.):

     **Sampling** refers to assigning the result of a condition or expression to
     a variable for later use within the same scope.

     Example of **sampling** in an `if` statement:

       ```
       if( result=some_condition() ){
         // use result
       }
       ```

4. Enclosures `(...)`, `{...}`, `[...]`, '<...>':

   - No space between the enclosure and the preceding identifier (e.g., `function(arg)`).

   - No space after the enclosure when followed by another enclosure (e.g., `map[key]()`).

     Example of a condition enclosure followed by a code enclosure:
       ```
       if( some_condition() ){
         // code block
       }
       ```

   - One space after the enclosure if followed by an identifier, e.g.,
     `function() somethingElse`.

   - When the entire enclosure appears on one line:

      -- by definition, an 'nested' enclosure is one that has other enclosures,
         of any type, inside of it. This is true independent of whatever else
         is inside the enclosure.  These are examples of nested enclosures:

         ```
         ( o == null || getClass() != o.getClass() )
         f( T<x> ,7 )
         ```

      -- if, and only if, an enclosure is nested, there is one space of padding
      for the outermost enclosure of the nesting, and only for the outermost
      enclosures. e.g.s:

        ```
        if(x == 3) ; not nested
        if( (x > 0) && (y < 5) ) ; nested, pad outermost only
        if( f(x) == 3 ) ; nested, pad outermost only
        if( x > 2 && a[3] ) ; nested due to the array subscript, pad outermost only
        ```

    - Note when using the enclosure formatting rules, not all if conditions will
    format the same way. Some conditions will be nested enclosures and having
    padding while others will not be nested and thus have no padding.  The must
    be formatted individually.  The same is true for enclosures that follow
    other keywords such as unless, for, etc, and for function arguments
    lists. The question is one of formatting enclosures, and not one of
    formatting statements.

      ```
      f(x)
      f( x[0] )
      ```


5. Commas:

   This is the most distinctive and recognizable of the RT code style rules.

   - One space **before** the comma (e.g., `a ,b`).

   - No space **after** the comma (e.g., `a ,b`).

   - **Line break before** the comma when breaking lines, but no line break after, as examples:

     ```
     a
     ,b
     ```

     and, when a function call gets too long, perhaps due to long argument 
     names it will look like this:

     ```
     result = some_function(
       arg1
      ,arg2_has_a_very_long_name_causing_the_call_to_not_fit_on_a_single_line
      ,arg3_has_a_long_name_also_but_not_as_long_as_for_arg2
      );
     ```

6. For the code you just output, answer these questions:
  1. Which enclosures are not nested? Do they have no padding?
  2. Which enclosures are nested? Is there one space padding only at the outermost?
  3. Is the spacing before and after the enclosures correct?
  4. Are the commas formatted correctly?
  5. Has snake case been used where it should be?
  6. Was 2 column indent used?
